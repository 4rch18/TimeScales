#!/usr/bin/env python

# Author: Michele Mattioni
# Sat Nov  8 12:34:55 GMT 2008

#import neuron
import COPASI
import numpy
import pylab

class COPASISim:
    """Wrapper Class to use the COPASI Simulator"""
    def __init__(self, filename="biochemical_circuits/testSimple.xml"):
        """Load the SBML file"""
        self.datamodel = COPASI.CCopasiDataModel.GLOBAL
        self.datamodel.importSBML(filename)
        
    def advance(self, tstop):
        """Advanced the simulation until tstop"""
        task = self.getTask()
        if (task != None):
            problem = task.getProblem()
            # Storing everything in memory
            timesSeriesRequest = problem.getParameter("TimeSeriesRequested")
            timesSeriesRequest.setValue(True)
            # Setting the duration of the task
            duration = problem.getParameter("Duration")
            if (duration != None):
                duration.setValue(tstop)
                duration.getValue()
                print duration, duration.getValue()
                print "Simulation will run until %f" %tstop
            if (task.setMethodType(COPASI.CCopasiMethod.deterministic)):
                task.process(True)
                return task.getTimeSeries()
            else:
                print "The simulation was not performed, the method was not available\n"
        
        
    def getTask(self, taskType=COPASI.CCopasiTask.timeCourse):
        """Iterate over all the task available
            task: return the task
        """
        i = 0
        
        iMax = self.datamodel.getTaskList().size()
        task = None

        while (i < iMax):
            
            if (self.datamodel.getTask(i).getType() == taskType) :
                task = self.datamodel.getTask(i)
                return task
            i += 1
            
            # TODO Raise an Error if the task is not found or return None?
    
    def createVector(self, timeSeries):
        vars = timeSeries.getNumVariables()
        steps = timeSeries.getRecordedSteps()
        #steps = 3
        print steps
        data = numpy.zeros( (steps, vars) ) 
        for var in xrange(vars): #iterate over the values
            for step in xrange(steps): #iterate over the time
                data[step,var] = timeSeries.getData(step, var)
                
        return data

    def plotSim(self, data, ):
        pylab.plot(data[:,0],data[:,1])
        pylab.plot(data[:,0],data[:,2])
        pylab.plot(data[:,0],data[:,3])
            

if __name__ == "__main__":
    CopSim = COPASISim()
    tstop = 10.0
    #timeSeries = CopSim.advance(tstop) #
    data = CopSim.createVector(timeSeries)
    CopSim.plotSim(data)
    pylab.show()
 

    
strdef preface, dirstr
//preface = "/Users/jtmoyer/desk"
preface = "/home/mattions/Work/model/MSN/Time_scales/"

load_file ("../hoc/nacb_main.hoc")
print "main hoc loaded"

load_file("../hoc/make_spine_twopools.hoc")
	forall if (ismembrane("naf")) {print gnabar_naf, " ", hshift_naf, " ", secname()}

load_file ("../ses/spiny.ses")


maxcol = 500
objref stimx, stimxout
stimx = new Matrix(NSYN, maxcol)
strdef input_file


objref tvec, somav, spinhv
tvec = new Vector()
somav = new Vector()
spinhv = new Vector()
tvec.record(&t)
somav.record(&MSP_Cell[0].soma.v(0.5))
spinhv.record(&spinh[0].v(0.5))

objref spinaca, spinhca, spinsca
spinaca = new Vector()
spinhca = new Vector()
spinsca = new Vector()
spinaca.record(&spina[0].cai(0.5))
spinhca.record(&spinh[0].cai(0.5))
spinsca.record(&spins[0].cai(0.5))

objref nmdai, skkcai, dendv, dendcai
nmdai = new Vector()
skkcai = new Vector()
dendv = new Vector()
dendcai = new Vector()
nmdai.record(&NMDAsp[0].i)
skkcai.record(&spinh[0].ik_skkcasp(0.5))
dendv.record(&dend[5].v(0.5))
dendcai.record(&dend[5].cai(0.5))

objref A, B, D, P, V, W
A = new Vector()
B = new Vector()
D = new Vector()
P = new Vector()
V = new Vector()
W = new Vector()
A.record(&spina.A_rubin(0.5))
B.record(&spina.B_rubin(0.5))
D.record(&spina.D_rubin(0.5))
P.record(&spina.P_rubin(0.5))
V.record(&spina.V_rubin(0.5))
W.record(&spina.W_rubin(0.5))

objref fout
fout = new File()
strdef fstring


//****************************************************************************
spiket = 436.675

objref spinestim
spinestim = new Vector(14)
spinestim.x[0] = -30
spinestim.x[1] = -25
spinestim.x[2] = -20
spinestim.x[3] = -15
spinestim.x[4] = -0.5
spinestim.x[5] = 0.5
spinestim.x[6] = 1.5
spinestim.x[7] = 15
spinestim.x[8] = 20
spinestim.x[9] = 25
spinestim.x[10] = 30
spinestim.x[11] = 35
spinestim.x[12] = 40
spinestim.x[13] = 50

objref dax
dax = new Vector(1)
dax.x[0] = 425

objref catrace
catrace = new Vector()
catrace.record(&spina[0].cai(0.5))

objref apc, ic
MSP_Cell[0].soma apc = new APCount(0.5)
MSP_Cell[0].soma ic = new IClamp(0.5)
irun = 0

//.................



//.................

proc save_vectors() {
	fout.wopen(fstring)
	fout.printf("tvec\tsomav\tspinhv\tspinaca\tspinhca\tspinsca\tnmdai\tskkcai\tdendv\tdendcai\tA\tB\tD\tP\tV\tW\n")
	
	for (isv = 0; isv <= tvec.size()-1; isv=isv+20) {
		fout.printf("%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n", tvec.x[isv], somav.x[isv], spinhv.x[isv], spinaca.x[isv], spinhca.x[isv], spinsca.x[isv], nmdai.x[isv], skkcai.x[isv], dendv.x[isv], dendcai.x[isv], A.x[isv], B.x[isv], D.x[isv], P.x[isv], V.x[isv], W.x[isv])
	}
	
	fout.close()
}

proc play_stimx() {
	stimxout = new File()
	stimxout.ropen(input_file)
	stimx.scanf(stimxout,NSYN,maxcol-1)
	stimxout.close()


	for cntrw = 0, NSYN-1 {
		cntcl = 0
		while (stimx.x[cntrw][cntcl] > 0) {
			ConnectFAKE_[cntrw].event(stimx.x[cntrw][cntcl])
			cntcl = cntcl + 1
		}
	}
}

objref vnew, vold
vnew = new Vector()
vold = new Vector()
vnew.record(&MSP_Cell[0].soma.v(0.5))

objref fin
fin = new File()
fin.ropen("./noout.txt")
vold.scanf(fin)
fin.close()

//somav.size()
//objref fin
//fin = new File()
//fin.wopen("./noout.txt")
//for idiff = 0, somav.size()-1 {fin.printf("%g\n", somav.x[idiff])}
//fin.close()

da = 0

proc init() {
	// it is actually quite difficult to send events to the NetCons.
	// for one, there is some trouble with initializing the event queue.  i got
	// the first event to the first NetCon to go through but subsequent ones
	// would not. to fix this -
	// if you just opened the simulation, init more than once.  also, it 
	// is important to setnetn to zero; other values don't seem to work.
	
	finitialize(v_init)

	// play/record netstims code
	if (recordstim == 1) {
		playstim = 0
		setnetn(1e7)
		stimx.resize(NSYN,maxcol)
		for cntrow = 0, NSYN-1 {
			for cntcol = 0, maxcol-2 {
				stimx.x[cntrow][cntcol] = 0
			}
		}
	} else if (playstim == 1) {
		setnetn(0)
		play_stimx()
		recordstim = 0
	} else { setnetn(1e7) }

//	ConnectFAKE_[168].event(130)	
	ConnectFAKE_[168].event(5)	

//	for idiff = 0, spinestim.size()-1 {
//		ConnectFAKE_[168].event(spinestim.x(idiff))	
//		print spinestim.x(idiff)
//	}

	idiff = 0
	kda = 0

	if (da == 1) {
		cvode.event(130, "d1_synsp()")
		cvode.event(160, "unmod_sp()")
	}
	
	frecord_init()
	
	spina[0] pHC_rubin = 20         // 4
	spina[0] aHC_rubin = 8          // 0.6
	spina[0] vtheta_rubin = 10      // 2
	spina[0] dtheta_rubin = 2       // 2.6
	spina[0] btheta_rubin = 1       // 0.55
	spina[0] scale_rubin = 1
	spina[0] tp_rubin = 250         // 500 ms
	spina[0] tw_rubin = 250         // 500 ms

	if (cvode.active()) {
		cvode.re_init()
	} else {
		fcurrent()
	}
}

proc advance() {
	if (find_diff) {
		idiff = idiff + 1
		diffv = MSP_Cell[0].soma.v(0.5) - vold.x[idiff]
	}
	
	fadvance()
}

//****************************************************************************


playstim = 1
recordstim = 0
for i = 0, NSYN-1 {NS_NetStim[i].pp.seed(startsw()%10000)}


//sprint(input_file,"../dfiles/jns_inputs/upstate_forvclamp_6.2hz.dat")		// just for the first init
//find_diff = 0
//da = 0
//steps_per_ms = 200
//dt = 0.005
//v_init = -55
//tstop = 600

sprint(input_file,"../dfiles/jns_inputs/zero_freq_inputs.dat")		// just for the first init
champawt(0)
chnmdawt(0)
//unmod_sp()
spinestim.resize(1)
//spinestim.x(0) = 5.0 // won't work anymore, just put it in init
IClamp[0].del = 0
IClamp[0].amp = 0.07
find_diff = 1
dt = 0.005
tstop = 65
v_init = -55

med_calcium()
cvode.active(0)
init()


xpanel("modulation panel")
xvalue("caqsp_ratio","CAQSP_RATIO", 1,"caqsp_ratio(CAQSP_RATIO)", 1, 1 )
xvalue("cansp_ratio","CANSP_RATIO", 1,"cansp_ratio(CANSP_RATIO)", 1, 1 )
xvalue("carsp_ratio","CARSP_RATIO", 1,"carsp_ratio(CARSP_RATIO)", 1, 1 )
xvalue("L1.3SP_ratio","L13SP_RATIO", 1,"l13sp_ratio(L13SP_RATIO)", 1, 1 )
xvalue("L1.2SP ratio","L12SP_RATIO", 1,"l12sp_ratio(L12SP_RATIO)", 1, 1 )
xvalue("nafsp_ratio","NAFSP_RATIO", 1,"nafsp_ratio(NAFSP_RATIO)", 1, 1 )
xvalue("napsp_ratio","NAPSP_RATIO", 1,"napsp_ratio(NAPSP_RATIO)", 1, 1 )
//xvalue("kassp_ratio","KASSP_RATIO", 1,"kassp_ratio(KASSP_RATIO)", 1, 1 )
xvalue("kirsp_ratio","KIRSP_RATIO", 1,"kirsp_ratio(KIRSP_RATIO)", 1, 1 )
xvalue("skkcasp_ratio","SKKCASP_RATIO", 1,"skkcasp_ratio(SKKCASP_RATIO)", 1, 1 )
xlabel("--------------------")
xvalue("ampasp weight","nAMPA_WTSP", 1,"gampasp(nAMPA_WTSP)", 1, 1 )
xvalue("nmdasp weight","nNMDA_WTSP", 1,"gnmdasp(nNMDA_WTSP)", 1, 1 )
xlabel("--------------------")
xvalue("mshift_caL13sp","nMSHIFT_CAL13SP", 1,"set_mshiftcal13sp(nMSHIFT_CAL13SP)", 1, 1 )
xvalue("hshift_nafsp","nHSHIFT_NAFSP", 1,"set_hshiftnafsp(nHSHIFT_NAFSP)", 1, 1 )
xvalue("g_pas stem", "GPS", 1, "{spins[0] g_pas = 1.15e-5 * GPS}", 1, 1)
xvalue("g_pas head", "GPH", 1, "spinh[0] g_pas = 1.15e-5 * GPH", 1, 1)
xcheckbox("da mods", &da)
xlabel("------------")
xpanel (1560,30)


xpanel("tuning panel")
xvalue("caqsp","nP_CAQSP", 1,"set_caqsp(nP_CAQSP)", 1, 1 )
xvalue("cansp","nP_CANSP", 1,"set_cansp(nP_CANSP)", 1, 1 )
xvalue("carsp","nP_CARSP", 1,"set_carsp(nP_CARSP)", 1, 1 )
xvalue("L1.3SP","nP_CAL13SP", 1,"set_l13sp(nP_CAL13SP)", 1, 1 )
xvalue("L1.2SP","nP_CALSP", 1,"set_l12sp(nP_CAL12SP)", 1, 1 )
xvalue("nafsp","nG_NAFSP", 1,"set_nafsp(nG_NAFSP)", 1, 1 )
xvalue("napsp","nG_NAPSP", 1,"set_napsp(nG_NAPSP)", 1, 1 )
//xvalue("kassp","nG_KASSP", 1,"set_kassp(nG_KASSP)", 1, 1 )
xvalue("kirsp","nG_KIRSP", 1,"set_kirsp(nG_KIRSP)", 1, 1 )
xvalue("skkcasp","nG_SKKCASP", 1,"set_skkcasp(nG_SKKCASP)", 1, 1 )
xlabel("--------------------")
xvalue("ampasp weight","nAMPA_WTSP", 1,"champawtsp(nAMPA_WTSP)", 1, 1 )
xvalue("nmdasp weight","nNMDA_WTSP", 1,"chnmdawtsp(nNMDA_WTSP)", 1, 1 )
xlabel("--------------------")
xvalue("mshift_caL13sp","nMSHIFT_CAL13SP", 1,"set_mshiftcal13sp(nMSHIFT_CAL13SP)", 1, 1 )
xvalue("hshift_nafsp","nHSHIFT_NAFSP", 1,"set_hshiftnafsp(nHSHIFT_NAFSP)", 1, 1 )
xvalue("spins[0].g_pas")
xvalue("spinh[0].g_pas")
xpanel (1560,550)



//.................

//load_file("tmp.ses")


objref w
w = new Vector()
w.record(&spina[0].W_rubin(0.5))








